# docker-compose down && docker-compose up -d
# mvn clean package
# clear && docker compose down && docker compose up -d

# clear && docker compose down configserver s3 eurekaserver && docker compose up -d configserver s3 eurekaserver

# clear && docker compose up -d configserver

name: filesharingservice


volumes:
  db:
    driver: local
  minio-data:
    driver: local


x-common-variables: &common-variables
  PROFILE: default
  CONFIG_SERVER_URI: 'http://${CONFIG_SERVER_HOST}:${CONFIG_SERVER_PORT}'
x-eureka-server-uri: &eureka-server-uri
  EUREKA_SERVER_URI: 'http://${EUREKA_SERVER_HOST}:${EUREKA_SERVER_PORT}/eureka/'


services:
  # Всю конфигурацию для сервисов надо передавать через переменные среды окружения в файле .env определены открытые перменные, которые можно использовать для интерполяции во время выполнения команды docker-compose up, а в файле postgres-secrets.env -> определены секретные переменные среды, которые нельзя использовать для интерполяции. 
  database:
    image: 'postgres:latest'
    restart: 'unless-stopped'
    # Содержит определения секретных перменных среды POSTGRES_DB и POSTGRES_PASSWORD (обязательная переменная)

    container_name: database
    volumes:
      - 'db:/var/lib/postgresql/data'
    
    environment:
      POSTGRES_DB: '${DATABASE_NAME}'
      POSTGRES_USER: '${DATABASE_USERNAME}'
      POSTGRES_PASSWORD: '${DATABASE_PASSWORD}'

    ports:
      # Порт для серверного приложения и для контейнера с базой данных.
      # Переменная объявлена в .env файле
      - '${DATABASE_PORT}:5432'
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

    networks:
      filesharingservice_network:
        aliases:
          - '${DATABASE_HOST}'


  minio:
    image: 'minio/minio:latest'
    restart: always
    environment:
      MINIO_ROOT_USER: '${MINIO_ROOT_USER}'
      MINIO_ROOT_PASSWORD: '${MINIO_ROOT_PASSWORD}'
    
    container_name: "minio"
    
    ports:
    # Minio Server
      - "${MINIO_SERVER_PORT}:${MINIO_SERVER_PORT}"
    # Minio Console -> Панель управления администратора объектного хранилища
      - "9001:9001"
    volumes:
      - "minio-data:/data"
    # Выполнится сразу после запуска контейнера
    command: server /data --console-address ":9001"
    
    networks:
      filesharingservice_network:
        aliases:
          - "${MINIO_SERVER_HOST}"


  keycloak:
    # Название собранного из Dockerfile, указанного в build, образа
    image: 'filesharingservice/keycloak'
    build:
      context: './keycloak'

    hostname: '${KEYCLOAK_HOSTNAME}'

    restart: 'unless-stopped'
    
    container_name: keycloak

    depends_on:
      database:
        condition: service_healthy
    
    # command: ["start", "--http-port=${KEYCLOAK_HTTP_PORT}"]
    command: ["start"]

    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HTTP_ENABLED: true
      # KC_HOSTNAME: 'localhost'
      KC_HOSTNAME: 'http://localhost:${KEYCLOAK_HTTP_PORT}'
      
      KC_DB: postgres
      KC_DB_USERNAME: '${DATABASE_USERNAME}'
      KC_DB_PASSWORD: '${DATABASE_PASSWORD}'
      KC_DB_URL: 'jdbc:postgresql://${DATABASE_HOST}:5432/${DATABASE_NAME}?useSSL=false'

    ports:
      - '${KEYCLOAK_HTTP_PORT}:8080'
      - '${KEYCLOAK_HTTPS_PORT}:8443'
      - '9002:9000'

    networks:
      filesharingservice_network:
        aliases:
          - '${KEYCLOAK_HOSTNAME}'


  configserver:
    # image: 'filesharingservice/configserver:0.0.1-SNAPSHOT'
    pull_policy: never
    build:
      context: '../file-sharing-config-server'

    restart: 'unless-stopped'

    container_name: 'config-sever'
    # Для файла application.yml нужна перменная среды CONFIG_SERVER_PORT

    environment:
      CONFIG_SERVER_PORT: '${CONFIG_SERVER_PORT}'
      CONFIG_REPOSITORY_URL: '${CONFIG_REPOSITORY_URL}'

    ports:
      - '${CONFIG_SERVER_PORT}:${CONFIG_SERVER_PORT}'

    networks:
      filesharingservice_network:
        aliases:
          - '${CONFIG_SERVER_HOST}'


  s3:
    # image: 'filesharingservice/s3:0.0.1-SNAPSHOT'
    pull_policy: never
    build:
      context: '../file-sharing-s3-service'
    
    restart: 'unless-stopped'

    container_name: s3

    depends_on:
      minio:
        condition: service_started
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started

    environment:
      << : [*common-variables, *eureka-server-uri]
    
      S3_SERVICE_PORT: '${S3_SERVICE_PORT}'
      SERVER_PATH: '${SERVER_PATH}'

      MINIO_URI: 'http://${MINIO_SERVER_HOST}:${MINIO_SERVER_PORT}'

      MINIO_ACCESS_KEY: '${MINIO_ACCESS_KEY}'
      MINIO_SECRET_KEY: '${MINIO_SECRET_KEY}'

      MINIO_REGION: '${MINIO_REGION}'
      MINIO_BUCKET: '${MINIO_BUCKET}'
      MAX_FILE_SIZE: 20MB
      MAX_REQUEST_SIZE: 20MB
      SWAGGER_UI_PATH: '${SWAGGER_UI_PATH}'
      KEYCLOAK_URI: 'http://${KEYCLOAK_HOSTNAME}:8080/realms/${KEYCLOAK_REALM}'


    ports:
      - '${S3_SERVICE_PORT}:${S3_SERVICE_PORT}'

    networks:
      - filesharingservice_network


  eurekaserver:
    # image: 'filesharingservice/eurekaserver:0.0.1-SNAPSHOT'
    pull_policy: never
    build:
      context: '../file-sharing-eureka-server'

    restart: 'unless-stopped'

    container_name: 'eureka-server'

    depends_on:
      configserver:
        condition: service_started  

    environment:
      << : [*common-variables, *eureka-server-uri]
      EUREKA_SERVER_PORT: '${EUREKA_SERVER_PORT}'

    ports:
      - '${EUREKA_SERVER_PORT}:${EUREKA_SERVER_PORT}'

    networks:
      filesharingservice_network:
        aliases:
          - '${EUREKA_SERVER_HOST}'


networks:
  filesharingservice_network: